[*#!/usr/bin/env node
var CONSTANT = require('./source/lib/Constant.js');
var theSymbolTable = require('./source/lib/SymbolTable.js');
var aEvaluator = require('./source/lib/Evaluator.js');

theSymbolTable.initialize();
*]

/~ Tokens Definitions for Scheme Syntax ~/

/~ Tokens to be ignored (e.g. whitespace, comments) ~/
! '\ |\t|\r\n|\n|;[^\n]*\n' 
;

/~ Token pattern matching rules ~/
	'\('
	'\)'
	'\.'
	'\''
	'\`'
	'\,'
	'\@'
 
 	'[0-9]+|[0-9]+\.[0-9]*|[0-9]*\.[0-9]+'	  NUMBER [* %match = parseFloat( %match ); *]
	'[^\(\)0-9\.\'\`\,\@" ][^\) ]*'  SYMBOL    /~ symbols cannot begin with digits, parens, quotes, dots, etc. ~/
	'\"[^"]+\"'	STRING   [* %match = %match.substr( 1, %match.length - 2 ); *]

;

##

/~ Grammar rules ~/

expr:
    sexpr                [* theParseTree = %1; *]
	;

list:
    '(' ')'	            [* %% = null; *]
    | '(' members ')'   [* %% = %2; *]
	;

members:
	sexpr               [* %% = theSymbolTable.cons(%1, theSymbolTable.nil()); *]
    | sexpr members     [* %% = theSymbolTable.cons(%1, %2); *]
    | sexpr '.' sexpr   [* %% = theSymbolTable.improper(%1, %3); *]
        ;

sexpr:
    list
	| atom
	;

atom:
    NUMBER     [* %% = theSymbolTable.element('number', %1); *]
    | STRING   [* %% = theSymbolTable.element('string', %1); *]
    | SYMBOL   [* %% = theSymbolTable.element('symbol', %1); *]
    ;

[*
/* Switching one of these variables on will enable debug facilities
        of the various parser drivers */
//##PREFIX##_dbg_withtrace = true;
//##PREFIX##_dbg_withparsetree = true;
//##PREFIX##_dbg_withstepbystep = true;
var sexprCount = 0;
var error_offsets = new Array();
var error_lookaheads = new Array();
var error_count = 0;

var theParseTree = null;

var src_file = new String();

var argv = process.argv.slice(2);

for (var i in argv)
{
	if (src_file == "")
	{
		src_file = argv[i];
	}
}

if (src_file.length) {
    var file = require('fs').readFileSync(src_file, 'utf8');
    if (parse(file) == 0)
        console.log(aEvaluator.evaluate(theParseTree));
}
else {
    process.stdin.resume();
    process.stdin.setEncoding('utf8');
    process.stdout.write("> ");

    process.stdin.on('data', function(input) {
    	if(process_input(input.trim().toLowerCase()) == 0)
        	console.log(aEvaluator.evaluate(theParseTree));

    	process.stdout.write("> ");
	})
}


/******************************************************************************
 
    dump
 
 ******************************************************************************/

function dump (x) {
    console.log(JSON.stringify(x, null, 4));
};
 

/******************************************************************************
 
    parse
 
 ******************************************************************************/

function parse (source) {
    error_count = __##PREFIX##parse(source, error_offsets, error_lookaheads);
 
    if (error_count == 0)
        return 0;


    for( var i = 0; i < error_count; i++ )
        console.log(
            "Parse error near \"" + source.substr( error_offsets[i] ) +
            "\", expecting \"" + error_lookaheads[i].join() + "\"" );
    return -1;
}


/******************************************************************************

    process_input

 ******************************************************************************/

function process_input (input) {
    switch (input) {
        case '' :
            break;

        case 'quit' :
            process.exit(1);

        case 'parsetree' :
            dump(theParseTree);
            break;

        case 'symboltable' :
            dump(theSymbolTable.head());
            break;

        default :
            parse(input);
            return 0;
    }
 
    return 1;
}

*]
